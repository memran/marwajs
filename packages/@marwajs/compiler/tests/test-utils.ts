// tests/test-utils.ts
import * as runtime from "@marwajs/core";
import { compileTemplateToIR } from "../src/template/compile";

/**
 * Evaluate compiled ESM code generated by compileSFC.
 * Replaces @marwajs/core imports with live bindings from runtime.
 */
export async function evalCompiled(code: string) {
  // namespace imports: import * as Core from '@marwajs/core'
  const namespaces: string[] = [];
  code = code.replace(
    /import\s*\*\s*as\s*([A-Za-z$_][\w$]*)\s*from\s*['"]@marwajs\/core['"]\s*;?/g,
    (_, ns) => {
      namespaces.push(ns);
      return "";
    }
  );

  // named imports (possibly aliased)
  const destructured: Array<{ orig: string; alias: string }> = [];
  code = code.replace(
    /import\s*\{([^}]+)\}\s*from\s*['"]@marwajs\/core['"]\s*;?/g,
    (_, group) => {
      group
        .split(",")
        .map((s: string) => s.trim())
        .filter(Boolean)
        .forEach((entry: string) => {
          const m = entry.match(
            /^([A-Za-z$_][\w$]*)(?:\s+as\s+([A-Za-z$_][\w$]*))?$/
          );
          if (m) destructured.push({ orig: m[1], alias: m[2] ?? m[1] });
        });
      return "";
    }
  );

  // default import: import Core from '@marwajs/core'
  code = code.replace(
    /import\s+([A-Za-z$_][\w$]*)\s*from\s*['"]@marwajs\/core['"]\s*;?/g,
    (_, alias) => {
      return `const ${alias} = runtime;`;
    }
  );

  // type-only imports
  code = code.replace(
    /import\s+type\s*\{[^}]*\}\s*from\s*['"]@marwajs\/core['"]\s*;?/g,
    ""
  );

  // build header that rebinds imports from the runtime namespace
  const headerParts: string[] = [];
  if (destructured.length) {
    const pieces = destructured
      .map(({ orig, alias }) => (orig === alias ? orig : `${orig}: ${alias}`))
      .join(", ");
    headerParts.push(`const { ${pieces} } = runtime;`);
  }
  for (const ns of namespaces) headerParts.push(`const ${ns} = runtime;`);
  const header = headerParts.length ? headerParts.join("\n") + "\n" : "";

  // ESM default export â†’ return
  const body = code.replace(/export\s+default\s+/, "return ");

  // Evaluate
  const factory = new Function("runtime", header + body);
  return factory(runtime);
}
// small helper
export function compile(html: string, scopeAttr: string = "data-s") {
  const ir = compileTemplateToIR(html, {
    file: "Test.marwa",
    name: "TestComp",
    scopeAttr: scopeAttr, // any string; present in DOM element creation
  }) as any; // to read .imports we attached
  return ir;
}
